---
- hosts: blue_team
  become: true
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
    - name: Install system dependencies
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - build-essential
        - python3-pip
        - python3-dev
        - git
        - curl
        - wget
        - tar
        - python3-venv
        - libssl-dev
        - libffi-dev
        - openssh-client
        - openssh-server
        - openssl
        - jq
        - ufw
        - auditd
        - net-tools

# change here
    - name: Download and run Node.js setup script
      get_url:
        url: https://deb.nodesource.com/setup_14.x
        dest: /tmp/setup_14.sh
      become: true

    - name: Run the Node.js setup script
      command: bash /tmp/setup_14.sh
      become: true

    - name: Install Node.js and npm
      apt:
        name: nodejs
        state: present
      become: true



    - name: Install Python packages for analysis
      pip:
        name:
          - pyshark      # Python packet analysis library
          - scapy       # Packet manipulation library
        state: present

    - name: Create capture directory
      file:
        path: /opt/capture
        state: directory
        mode: '0755'

    # Set up continuous capture service
    - name: Install capture service
      copy:
        dest: /etc/systemd/system/traffic-capture.service
        content: |
          [Unit]
          Description=Traffic Mirror Capture Service
          After=network.target

          [Service]
          Type=simple
          ExecStart=/usr/bin/tcpdump -i any -w /opt/capture/mirror_%Y%m%d_%H%M%S.pcap udp port 4789
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Configure log rotation for captures
      copy:
        dest: /etc/logrotate.d/packet-capture
        content: |
          /opt/capture/*.pcap {
            daily
            rotate 7
            compress
            missingok
            notifempty
            create 0644 root root
          }

    - name: Create analysis script
      copy:
        dest: /opt/capture/analyze_traffic.py
        mode: '0755'
        content: |
          #!/usr/bin/env python3
          import pyshark
          import sys
          from datetime import datetime
          
          def analyze_vxlan_traffic(pcap_file):
              print(f"Analyzing {pcap_file}")
              cap = pyshark.FileCapture(pcap_file)
              
              for packet in cap:
                  try:
                      if hasattr(packet, 'vxlan'):
                          print(f"VXLAN Packet - Inner: {packet.highest_layer}")
                  except Exception as e:
                      pass
              
          if _name_ == "_main_":
              if len(sys.argv) > 1:
                  analyze_vxlan_traffic(sys.argv[1])

    - name: Fix traffic-capture service file
      copy:
        dest: /etc/systemd/system/traffic-capture.service
        content: |
          [Unit]
          Description=Traffic Mirror Capture Service
          After=network.target

          [Service]
          ExecStart=/bin/bash -c "tcpdump -i eth0 -w /opt/capture/mirror_$(date +%%Y%%m%%d_%%H%%M%%S).pcap"
          Restart=always

          [Install]
          WantedBy=multi-user.target
      become: true

    - name: Create capture directory
      file:
        path: /opt/capture
        state: directory
        mode: '0755'
      become: true

    - name: Reload systemd daemon
      command: systemctl daemon-reload
      become: true

    - name: Restart and enable traffic-capture service
      service:
        name: traffic-capture
        state: restarted
        enabled: true
      become: true

    - name: Install network_monitoring_tools
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - netdata
        - ntopng
        - tcpdump
        - wireshark
        - snort

    # - name: Update APT cache
    #   apt:
    #     update_cache: yes
    #   become: true

    # - name: Add Elastic GPG key
    #   apt_key:
    #     url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
    #     state: present
    #   become: true

    # - name: Add Elastic APT repository
    #   apt_repository:
    #     repo: "deb https://artifacts.elastic.co/packages/7.x/apt stable main"
    #     state: present
    #   become: true

    # - name: Download Wazuh GPG key
    #   get_url:
    #     url: https://packages.wazuh.com/key/GPG-KEY-WAZUH
    #     dest: /tmp/WAZUH-GPG-KEY
    #     mode: '0644'
    #   become: true

    # - name: Verify Wazuh GPG key file exists
    #   stat:
    #     path: /tmp/WAZUH-GPG-KEY
    #   register: key_file

    # - name: Convert Wazuh GPG key to keyring format
    #   command: "gpg --dearmor -o /usr/share/keyrings/wazuh-keyring.gpg /tmp/WAZUH-GPG-KEY"
    #   become: true

    # - name: Fail if Wazuh GPG key is missing
    #   fail:
    #     msg: "The Wazuh GPG key file is missing or unreadable."
    #   when: not key_file.stat.exists

    # - name: Remove temporary Wazuh GPG key file
    #   file:
    #     path: /tmp/WAZUH-GPG-KEY
    #     state: absent
    #   become: true

    # - name: Download Falco GPG key
    #   get_url:
    #     url: https://falco.org/repo/falcosecurity-packages.asc
    #     dest: /usr/share/keyrings/falco-keyring.gpg
    #     mode: '0644'
    #   become: true

    # - name: Add Falco APT repository
    #   apt_repository:
    #     repo: "deb [signed-by=/usr/share/keyrings/falco-keyring.gpg] https://download.falco.org/packages/deb stable main"
    #     state: present
    #   become: true

    # - name: Install log management and analysis tools
    #   apt:
    #     name: "{{ item }}"
    #     state: present
    #   loop:
    #     - elasticsearch
    #     - filebeat
    #     - osquery
    #     - wazuh-manager
    #     - wazuh-agent
    #     - falco
    #   become: true

    - name: Install incident response and forensics tools
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - sleuthkit
        - autopsy
        - silversearcher-ag

    - name: Ensure pip is installed
      apt:
        name: python3-pip
        state: present
      become: true

    # - name: Install timesketch using pip
    #   pip:
    #     name: timesketch
    #     state: present
    #     executable: pip3
    #   become: true


    - name: Install defensive_hardening_tools
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - apparmor
        - fail2ban
        - lynis

    - name: Install firewall_and_network_security_tools
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - ufw
        - nmap
        - iptables
        - fail2ban

    - name: ADD Users to Blue_Team
      shell: |
        git clone https://github.com/zokevlar98/script_cyber_range
        cd /home/ubuntu/script_cyber_range
        sudo chmod +x script_adduser.sh
        sudo ./script_adduser.sh
        # rm script_adduser.sh

    # - name: check instalation and configuration of Blue_Team
    #   shell: |
    #     cd /home/ubuntu/script_cyber_range/blue_team
    #     sudo chmod +x check.sh
    #     sudo ./check.sh

    - name: Install updating_tools_and_dependencies
      shell: |
        apt update && apt upgrade -y